generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  boards Board[]
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  statuses Status[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  color     String   @db.Char(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int

  tasks Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String   @db.VarChar(200)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statusId Int

  subtasks Subtask[]
}

model Subtask {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(100)
  isComplete Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
}
